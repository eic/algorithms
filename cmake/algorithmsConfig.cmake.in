# CMake config for the algorithms package
#
# Defines CMake targets for requested and available components.  All additional
# information, e.g. include directories and dependencies, are defined as
# target-specific properties and are automatically propagated when linking to
# the target.

@PACKAGE_INIT@

set(algorithms_COMPONENTS @_components@)

# print version and components information
if(NOT algorithms_FIND_QUIETLY)
  message(STATUS "found algorithms version ${algorithms_VERSION}")
endif()

# check that requested components are available
foreach(_component ${algorithms_FIND_COMPONENTS})
  # check if this component is available
  if(NOT _component IN_LIST algorithms_COMPONENTS)
    if (${algorithms_FIND_REQUIRED_${_component}})
      # not supported, but required -> fail
      set(algorithms_FOUND False)
      set(algorithms_NOT_FOUND_MESSAGE "required component '${_component}' not found")
    else()
      # not supported and optional -> skip
      list(REMOVE_ITEM algorithms_FIND_COMPONENTS ${_component})
      if(NOT algorithms_FIND_QUIETLY)
        message(STATUS "optional component '${_component}' not found")
      endif()
    endif()
  endif()
endforeach()

# find external dependencies that are needed to link with algorithms. since the
# exported algorithms targets only store the linked external target names they need
# to be found again. this avoids hard-coded paths and makes the installed
# config/library relocatable. use exact version match where possible to ensure
# the same versions are found that were used at build time.
# `find_dependency` is a wrapper around `find_package` that automatically
# handles QUIET and REQUIRED parameters.
include(CMakeFindDependencyMacro)
find_dependency(fmt @fmt_VERSION@ CONFIG EXACT)
if(Acts IN_LIST algorithms_COMPONENTS)
  find_dependency(Acts @Acts_VERSION@ CONFIG EXACT)
endif()

# load **all** available components. we can not just include the requested
# components since there can be interdependencies between them.
if(NOT algorithms_FIND_QUIETLY)
  message(STATUS "loading components:")
endif()
foreach(_component ${algorithms_COMPONENTS})
  if(NOT algorithms_FIND_QUIETLY)
    message(STATUS "  ${_component}")
  endif()
  # include the targets file to create the imported targets for the user
  include(${CMAKE_CURRENT_LIST_DIR}/algorithms${_component}Targets.cmake)
  # create backwards compatible alias
  add_library(algo${_component} ALIAS ${_component})
  set_target_properties(algo${_component} PROPERTIES
    DEPRECATION "Use target ${_component} instead of algo${_component}")
endforeach()
